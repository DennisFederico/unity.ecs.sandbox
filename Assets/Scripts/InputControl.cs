//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/InputControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControl"",
    ""maps"": [
        {
            ""name"": ""MagnetControl"",
            ""id"": ""3bb2c611-229f-4a71-bd71-8dbafd7fbe40"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6f11f78e-bc24-45ac-8376-2ffb523a5996"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""176c234d-318f-4213-b2f6-58614ee8deea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraOrbit"",
                    ""type"": ""Value"",
                    ""id"": ""6a2b24c9-7f46-4da2-8295-8b84c4c4d41e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraZoom"",
                    ""type"": ""Value"",
                    ""id"": ""ea444ac6-a431-4669-8687-d2bc6f47852b"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""FullMove"",
                    ""id"": ""b051110b-4f59-42c7-bdde-59132d949c5a"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6612478b-45bb-4b99-a8d0-d9c4e4906707"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e7209c82-a9cc-4f6b-a66a-63631ad613c1"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c8c4714d-d542-4015-9e75-013d92060f82"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3712ef70-310f-4d5f-9604-4c5fc84b9893"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""3ea8e478-53af-4fb8-ace1-81c7562f2601"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""f07ca701-64be-4a00-be5a-f99318bea3b8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5f02526f-4e6f-4e1b-9eb8-7c6b7eaeeb9f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraOrbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9cb54a85-55ec-41a5-bfb2-6a90021c9a68"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56fb9caa-de0a-43f2-a605-60235846122d"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MagnetControl
        m_MagnetControl = asset.FindActionMap("MagnetControl", throwIfNotFound: true);
        m_MagnetControl_Move = m_MagnetControl.FindAction("Move", throwIfNotFound: true);
        m_MagnetControl_Boost = m_MagnetControl.FindAction("Boost", throwIfNotFound: true);
        m_MagnetControl_CameraOrbit = m_MagnetControl.FindAction("CameraOrbit", throwIfNotFound: true);
        m_MagnetControl_CameraZoom = m_MagnetControl.FindAction("CameraZoom", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MagnetControl
    private readonly InputActionMap m_MagnetControl;
    private List<IMagnetControlActions> m_MagnetControlActionsCallbackInterfaces = new List<IMagnetControlActions>();
    private readonly InputAction m_MagnetControl_Move;
    private readonly InputAction m_MagnetControl_Boost;
    private readonly InputAction m_MagnetControl_CameraOrbit;
    private readonly InputAction m_MagnetControl_CameraZoom;
    public struct MagnetControlActions
    {
        private @InputControl m_Wrapper;
        public MagnetControlActions(@InputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MagnetControl_Move;
        public InputAction @Boost => m_Wrapper.m_MagnetControl_Boost;
        public InputAction @CameraOrbit => m_Wrapper.m_MagnetControl_CameraOrbit;
        public InputAction @CameraZoom => m_Wrapper.m_MagnetControl_CameraZoom;
        public InputActionMap Get() { return m_Wrapper.m_MagnetControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MagnetControlActions set) { return set.Get(); }
        public void AddCallbacks(IMagnetControlActions instance)
        {
            if (instance == null || m_Wrapper.m_MagnetControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MagnetControlActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
            @CameraOrbit.started += instance.OnCameraOrbit;
            @CameraOrbit.performed += instance.OnCameraOrbit;
            @CameraOrbit.canceled += instance.OnCameraOrbit;
            @CameraZoom.started += instance.OnCameraZoom;
            @CameraZoom.performed += instance.OnCameraZoom;
            @CameraZoom.canceled += instance.OnCameraZoom;
        }

        private void UnregisterCallbacks(IMagnetControlActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
            @CameraOrbit.started -= instance.OnCameraOrbit;
            @CameraOrbit.performed -= instance.OnCameraOrbit;
            @CameraOrbit.canceled -= instance.OnCameraOrbit;
            @CameraZoom.started -= instance.OnCameraZoom;
            @CameraZoom.performed -= instance.OnCameraZoom;
            @CameraZoom.canceled -= instance.OnCameraZoom;
        }

        public void RemoveCallbacks(IMagnetControlActions instance)
        {
            if (m_Wrapper.m_MagnetControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMagnetControlActions instance)
        {
            foreach (var item in m_Wrapper.m_MagnetControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MagnetControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MagnetControlActions @MagnetControl => new MagnetControlActions(this);
    public interface IMagnetControlActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnCameraOrbit(InputAction.CallbackContext context);
        void OnCameraZoom(InputAction.CallbackContext context);
    }
}
