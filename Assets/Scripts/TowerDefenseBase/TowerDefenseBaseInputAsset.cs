//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/TowerDefenseBase/TowerDefenseBaseInputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TowerDefenseBase.Input
{
    public partial class @TowerDefenseBaseInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @TowerDefenseBaseInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""TowerDefenseBaseInputAsset"",
    ""maps"": [
        {
            ""name"": ""PlayerActions"",
            ""id"": ""b8947e5b-e71f-4e35-8297-2314b4200c60"",
            ""actions"": [
                {
                    ""name"": ""Mouse Move"",
                    ""type"": ""Value"",
                    ""id"": ""e076b9fe-275e-4543-84bc-20a055a1c301"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Place Standard Turret"",
                    ""type"": ""Value"",
                    ""id"": ""7c85008e-3f0e-4c63-8672-1585c9bf877a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Place Freeze Turret"",
                    ""type"": ""Value"",
                    ""id"": ""9fa49685-bcc7-48cb-8c0a-41fbbea532d0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Destroy Turret"",
                    ""type"": ""Value"",
                    ""id"": ""ffc82e08-ccfc-4f0f-85be-bce6b525eea4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Turret"",
                    ""type"": ""Value"",
                    ""id"": ""20156d75-f668-47d5-ad50-4c0b5a4d9b83"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d25524d4-9131-4775-9b27-2cb5ea78525d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""LeftModifier"",
                    ""id"": ""e1d597f2-138e-4010-be8a-a83ef2a2242f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place Standard Turret"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""ce114ef5-44db-4f32-9fa0-b9ef74662b9f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place Standard Turret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""f210049f-a336-4dcc-a327-05f7efb1eab3"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place Standard Turret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""RightClick"",
                    ""id"": ""a3fd335c-e1e9-4548-b62f-1d76155eb43f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place Freeze Turret"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""91ca2da0-b6b9-43a1-83b3-77a61591ba0d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place Freeze Turret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""a9644efb-dd28-44f7-8155-5a6c33c19651"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place Freeze Turret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backspace"",
                    ""id"": ""45a3abe0-dbbb-429e-99f8-63fceee1830c"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Destroy Turret"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""f2b2500a-78e6-4a78-a4c4-36d6683a5aa4"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Destroy Turret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""ca882dcc-2529-4dec-a92b-6690e4f1d452"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Destroy Turret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""ce2cb4fb-94ec-401c-b15f-274b9eaf94a6"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Turret"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""fb55a8cc-283c-434d-a482-15e4a05c7ce7"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Turret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""4c74060c-26ca-4dc2-883a-4dfdb75597db"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Turret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerActions
            m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
            m_PlayerActions_MouseMove = m_PlayerActions.FindAction("Mouse Move", throwIfNotFound: true);
            m_PlayerActions_PlaceStandardTurret = m_PlayerActions.FindAction("Place Standard Turret", throwIfNotFound: true);
            m_PlayerActions_PlaceFreezeTurret = m_PlayerActions.FindAction("Place Freeze Turret", throwIfNotFound: true);
            m_PlayerActions_DestroyTurret = m_PlayerActions.FindAction("Destroy Turret", throwIfNotFound: true);
            m_PlayerActions_RotateTurret = m_PlayerActions.FindAction("Rotate Turret", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerActions
        private readonly InputActionMap m_PlayerActions;
        private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
        private readonly InputAction m_PlayerActions_MouseMove;
        private readonly InputAction m_PlayerActions_PlaceStandardTurret;
        private readonly InputAction m_PlayerActions_PlaceFreezeTurret;
        private readonly InputAction m_PlayerActions_DestroyTurret;
        private readonly InputAction m_PlayerActions_RotateTurret;
        public struct PlayerActionsActions
        {
            private @TowerDefenseBaseInput m_Wrapper;
            public PlayerActionsActions(@TowerDefenseBaseInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @MouseMove => m_Wrapper.m_PlayerActions_MouseMove;
            public InputAction @PlaceStandardTurret => m_Wrapper.m_PlayerActions_PlaceStandardTurret;
            public InputAction @PlaceFreezeTurret => m_Wrapper.m_PlayerActions_PlaceFreezeTurret;
            public InputAction @DestroyTurret => m_Wrapper.m_PlayerActions_DestroyTurret;
            public InputAction @RotateTurret => m_Wrapper.m_PlayerActions_RotateTurret;
            public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActionsActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
                @MouseMove.started += instance.OnMouseMove;
                @MouseMove.performed += instance.OnMouseMove;
                @MouseMove.canceled += instance.OnMouseMove;
                @PlaceStandardTurret.started += instance.OnPlaceStandardTurret;
                @PlaceStandardTurret.performed += instance.OnPlaceStandardTurret;
                @PlaceStandardTurret.canceled += instance.OnPlaceStandardTurret;
                @PlaceFreezeTurret.started += instance.OnPlaceFreezeTurret;
                @PlaceFreezeTurret.performed += instance.OnPlaceFreezeTurret;
                @PlaceFreezeTurret.canceled += instance.OnPlaceFreezeTurret;
                @DestroyTurret.started += instance.OnDestroyTurret;
                @DestroyTurret.performed += instance.OnDestroyTurret;
                @DestroyTurret.canceled += instance.OnDestroyTurret;
                @RotateTurret.started += instance.OnRotateTurret;
                @RotateTurret.performed += instance.OnRotateTurret;
                @RotateTurret.canceled += instance.OnRotateTurret;
            }

            private void UnregisterCallbacks(IPlayerActionsActions instance)
            {
                @MouseMove.started -= instance.OnMouseMove;
                @MouseMove.performed -= instance.OnMouseMove;
                @MouseMove.canceled -= instance.OnMouseMove;
                @PlaceStandardTurret.started -= instance.OnPlaceStandardTurret;
                @PlaceStandardTurret.performed -= instance.OnPlaceStandardTurret;
                @PlaceStandardTurret.canceled -= instance.OnPlaceStandardTurret;
                @PlaceFreezeTurret.started -= instance.OnPlaceFreezeTurret;
                @PlaceFreezeTurret.performed -= instance.OnPlaceFreezeTurret;
                @PlaceFreezeTurret.canceled -= instance.OnPlaceFreezeTurret;
                @DestroyTurret.started -= instance.OnDestroyTurret;
                @DestroyTurret.performed -= instance.OnDestroyTurret;
                @DestroyTurret.canceled -= instance.OnDestroyTurret;
                @RotateTurret.started -= instance.OnRotateTurret;
                @RotateTurret.performed -= instance.OnRotateTurret;
                @RotateTurret.canceled -= instance.OnRotateTurret;
            }

            public void RemoveCallbacks(IPlayerActionsActions instance)
            {
                if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActionsActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);
        public interface IPlayerActionsActions
        {
            void OnMouseMove(InputAction.CallbackContext context);
            void OnPlaceStandardTurret(InputAction.CallbackContext context);
            void OnPlaceFreezeTurret(InputAction.CallbackContext context);
            void OnDestroyTurret(InputAction.CallbackContext context);
            void OnRotateTurret(InputAction.CallbackContext context);
        }
    }
}
